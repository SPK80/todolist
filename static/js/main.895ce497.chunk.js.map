{"version":3,"sources":["Components/TitleInput.module.css","Components/Task.module.css","Components/FilterButton.module.css","Components/StringInputForm.tsx","Components/EditableSpan.tsx","Components/Task.tsx","Components/FilterButton.tsx","Components/FiltersPanel.tsx","Components/Todolist.tsx","TodoListContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","StringInputForm","confirm","inputRef","useRef","useState","error","setError","onClickButtonHandler","current","value","trim","ref","onKeyDown","e","key","onClick","className","s","EditableSpan","props","setValue","isEditing","setIsEditing","setSpanMode","inputSize","toString","length","style","border","font","type","autoFocus","size","onChange","currentTarget","onBlur","escape","onDoubleClick","Task","task","removeTask","changeTaskIsDone","changeTaskTitle","isDone","taskIsDone","checked","id","target","title","newTitle","FilterButton","active","toggle","children","FiltersPanel","filterValue","toggleFilter","toggleHandler","Todolist","removeTaskHandler","taskId","todoListId","changeTaskIsDoneHandler","changeTaskTitleHandler","onRemoveTodoList","changeTodoListTitle","newTaskTitle","addNewTask","filter","changeFilter","tasks","map","TodoListContainer","tasksForTodoList","todoList","App","todoList1Id","v1","todoList2Id","todoLists","setTodoLists","allTasks","setAllTasks","updatedTasks","t","newFilter","updatedTodoLists","tl","removeTodoList","changedTasks","changedTodoLists","newTodoListId","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.895ce497.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"TitleInput_error__Qktn4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskIsDone\":\"Task_taskIsDone__15n0j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"FilterButton_active__VuBRV\"};","import React, {useRef, KeyboardEvent, useState} from \"react\";\r\nimport s from './TitleInput.module.css'\r\n\r\ntype StringInputFormPropsType = {\r\n    confirm: (value: string) => void\r\n}\r\n\r\nexport const StringInputForm: React.FC<StringInputFormPropsType> = ({confirm}) => {\r\n    \r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    const [error, setError] = useState(false)\r\n    \r\n    const onClickButtonHandler = () => {\r\n        if (inputRef?.current) {\r\n            if (inputRef.current.value.trim() === '') setError(true)\r\n            else confirm(inputRef.current.value)\r\n            inputRef.current.value = ''\r\n        }\r\n    }\r\n    \r\n    const onInputKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        if (e.key === 'Enter') onClickButtonHandler()\r\n        if (e.key === 'Escape' && inputRef?.current) inputRef.current.value = ''\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <input\r\n                ref={inputRef}\r\n                onKeyDown={onInputKeyPressHandler}\r\n            />\r\n            <button onClick={onClickButtonHandler}>+</button>\r\n            {error && <div className={s.error}>Input text required</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    confirm: (newValue: string) => void\r\n    escape?: () => void\r\n}\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const [value, setValue] = useState(props.value)\r\n    const [isEditing, setIsEditing] = useState(false)\r\n    \r\n    function onChangeHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    \r\n    const setSpanMode = () => setIsEditing(false)\r\n    const setInputMode = () => setIsEditing(true)\r\n    \r\n    const escape = () => {\r\n        setSpanMode()\r\n        setValue(props.value)\r\n        if (props.escape) props.escape()\r\n    }\r\n    \r\n    const confirm = () => {\r\n        setSpanMode()\r\n        props.confirm(value)\r\n    }\r\n    \r\n    const onKeyDownHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') confirm()\r\n        if (e.key === 'Escape') escape()\r\n    }\r\n    \r\n    const inputSize = value.toString().length\r\n    \r\n    return <>\r\n        {isEditing ?\r\n            <input\r\n                style={{border: \"none\", font: \"inherit\"}}\r\n                type=\"text\"\r\n                value={value}\r\n                autoFocus\r\n                size={inputSize}\r\n                onChange={onChangeHandler}\r\n                onBlur={confirm}\r\n                onKeyDown={onKeyDownHandler}\r\n            />\r\n            :\r\n            <span\r\n                style={{font: \"inherit\"}}\r\n                onDoubleClick={setInputMode}\r\n            >{props.value}</span>\r\n        }\r\n    </>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './Task.module.css'\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (id: string) => void\r\n    changeTaskIsDone: (id: string, value: boolean) => void\r\n    changeTaskTitle: (id: string, newTitle: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> =\r\n    ({\r\n         task,\r\n         removeTask,\r\n         changeTaskIsDone,\r\n         changeTaskTitle\r\n     }) => {\r\n        \r\n        const onChangeNewTaskNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            changeTaskIsDone(task.id, e.target.checked)\r\n        }\r\n        \r\n        const onDeleteTaskHandler = () => {\r\n            removeTask(task.id)\r\n        }\r\n        \r\n        const className = task.isDone ? s.taskIsDone : ''\r\n        \r\n        const confirmHandler = (newTitle: string) => {\r\n            changeTaskTitle(task.id, newTitle)\r\n        }\r\n        \r\n        return (\r\n            <li className={className}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={task.isDone}\r\n                    onChange={onChangeNewTaskNameHandler}\r\n                />\r\n                <button onClick={onDeleteTaskHandler}>X</button>\r\n                <EditableSpan\r\n                    value={task.title}\r\n                    confirm={confirmHandler}\r\n                />\r\n            </li>\r\n        )\r\n    }","import React from 'react';\r\nimport s from './FilterButton.module.css'\r\n\r\ntype FilterButtonPropsType = {\r\n    toggle: () => void\r\n    active: boolean\r\n}\r\n\r\nexport const FilterButton: React.FC<FilterButtonPropsType> =\r\n    (props) => {\r\n    const className = props.active ? s.active : ''\r\n    return (\r\n        <button\r\n            className={className}\r\n            onClick={() => props.toggle()}\r\n        >\r\n            {props.children }\r\n        </button>\r\n    )\r\n}","import React from 'react';\r\nimport {FilterButton} from \"./FilterButton\";\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active';\r\n\r\ntype FiltersPanelPropsType = {\r\n    toggleFilter: (filterValue: FilterValuesType) => void\r\n    filterValue: FilterValuesType\r\n}\r\n\r\nexport const FiltersPanel: React.FC<FiltersPanelPropsType> = ({filterValue,toggleFilter}) => {\r\n    \r\n    const toggleHandler = (filterValue:FilterValuesType) => {\r\n        toggleFilter(filterValue)\r\n    };\r\n    \r\n    return (\r\n        <div>\r\n            <FilterButton\r\n                toggle={()=>toggleHandler(\"all\")}\r\n                active={filterValue === \"all\"}\r\n            >All</FilterButton>\r\n            <FilterButton\r\n                toggle={()=>toggleHandler(\"active\")}\r\n                active={filterValue === \"active\"}\r\n            >Active</FilterButton>\r\n    \r\n            <FilterButton\r\n                toggle={()=>toggleHandler(\"completed\")}\r\n                active={filterValue === \"completed\"}\r\n            >Completed</FilterButton>\r\n    \r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {StringInputForm} from \"./StringInputForm\";\r\nimport {Task, TaskType} from \"./Task\";\r\nimport {FiltersPanel, FilterValuesType} from \"./FiltersPanel\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype TodolistPropsType = {\r\n    todoListId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskIsDone: (id: string, value: boolean, todoListId: string) => void\r\n    addNewTask: (newTaskTitle: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    onRemoveTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = (props) => {\r\n    \r\n    const toggleFilterHandler = (value: FilterValuesType) => {\r\n        props.changeFilter(value, props.todoListId);\r\n    };\r\n    \r\n    const addNewTaskHandler = (newTaskTitle: string) => {\r\n        props.addNewTask(newTaskTitle, props.todoListId)\r\n    };\r\n    \r\n    const removeTaskHandler = (taskId: string) => {\r\n        props.removeTask(taskId, props.todoListId)\r\n    }\r\n    \r\n    const changeTaskIsDoneHandler = (taskId: string, value: boolean) => {\r\n        props.changeTaskIsDone(taskId, value, props.todoListId)\r\n    }\r\n    \r\n    const changeTaskTitleHandler = (taskId: string, newTitle: string) => {\r\n        props.changeTaskTitle(taskId, newTitle, props.todoListId)\r\n    }\r\n    \r\n    const changeTodoListTitle = (newTitle: string) => {\r\n        props.changeTodoListTitle(newTitle, props.todoListId)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h3>\r\n                <button onClick={() => props.onRemoveTodoList(props.todoListId)}>X</button>\r\n                <EditableSpan\r\n                    value={props.title}\r\n                    confirm={changeTodoListTitle}\r\n                />\r\n            \r\n            </h3>\r\n            <StringInputForm confirm={addNewTaskHandler}/>\r\n            \r\n            <FiltersPanel\r\n                filterValue={props.filter}\r\n                toggleFilter={toggleFilterHandler}\r\n            />\r\n            \r\n            {\r\n                props.tasks.length\r\n                    ? <ul>\r\n                        {props.tasks.map(task => (\r\n                                <Task\r\n                                    key={task.id}\r\n                                    task={task}\r\n                                    removeTask={removeTaskHandler}\r\n                                    changeTaskIsDone={changeTaskIsDoneHandler}\r\n                                    changeTaskTitle={changeTaskTitleHandler}\r\n                                />\r\n                            )\r\n                        )}\r\n                    </ul>\r\n                    : <span>Create your task</span>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Todolist} from \"./Components/Todolist\";\r\nimport {TaskType} from \"./Components/Task\";\r\nimport {FilterValuesType} from \"./Components/FiltersPanel\";\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TodoListContainerPropsType = {\r\n    todoList: TodoListType\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todoListId: string) => void\r\n    changeTaskIsDone: (id: string, value: boolean, todoListId: string) => void\r\n    addNewTask: (newTaskTitle: string, todoListId: string) => void\r\n    changeFilter: (filter: FilterValuesType, todoListId: string) => void\r\n    onRemoveTodoList: (todoListId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoListId: string) => void\r\n    changeTodoListTitle: (newTitle: string, todoListId: string) => void\r\n}\r\nexport const TodoListContainer: React.FC<TodoListContainerPropsType> = (props) => {\r\n    \r\n    let tasksForTodoList = props.tasks\r\n    \r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForTodoList = tasksForTodoList.filter(task => task.isDone);\r\n    }\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForTodoList = tasksForTodoList.filter(task => !task.isDone);\r\n    }\r\n    \r\n    return (\r\n        <Todolist\r\n            todoListId={props.todoList.id}\r\n            title={props.todoList.title}\r\n            tasks={tasksForTodoList}\r\n            filter={props.todoList.filter}\r\n            removeTask={props.removeTask}\r\n            changeTaskIsDone={props.changeTaskIsDone}\r\n            addNewTask={props.addNewTask}\r\n            changeFilter={props.changeFilter}\r\n            onRemoveTodoList={props.onRemoveTodoList}\r\n            changeTaskTitle={props.changeTaskTitle}\r\n            changeTodoListTitle={props.changeTodoListTitle}\r\n        />)\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {v1} from 'uuid';\r\nimport {FilterValuesType} from \"./Components/FiltersPanel\";\r\nimport {TaskType} from \"./Components/Task\";\r\nimport {TodoListContainer, TodoListType} from \"./TodoListContainer\";\r\nimport {StringInputForm} from \"./Components/StringInputForm\";\r\n\r\nexport const App = () => {\r\n    \r\n    const todoList1Id = v1();\r\n    const todoList2Id = v1();\r\n    \r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>(\r\n        [\r\n            {id: todoList1Id, title: 'What to learn', filter: 'all'},\r\n            {id: todoList2Id, title: 'What to buy', filter: 'all'},\r\n        ]\r\n    )\r\n    \r\n    type TaskStateType = {\r\n        [id: string]: Array<TaskType>\r\n    }\r\n    \r\n    const [allTasks, setAllTasks] = useState<TaskStateType>({\r\n        [todoList1Id]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n        ],\r\n        [todoList2Id]: [\r\n            {id: v1(), title: \"Apples\", isDone: true},\r\n            {id: v1(), title: \"Cheese\", isDone: true},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n        ],\r\n    })\r\n    \r\n    const changeTaskIsDone = (taskId: string, value: boolean, todoListId: string) => {\r\n        const tasks = allTasks[todoListId]\r\n        const updatedTasks = tasks.map(t => t.id === taskId ? {...t, isDone: value} : t)\r\n        setAllTasks({...allTasks, [todoListId]: updatedTasks})\r\n    }\r\n    \r\n    const changeFilter = (newFilter: FilterValuesType, todoListId: string) => {\r\n        const updatedTodoLists = todoLists.map(tl => tl.id === todoListId ? {...tl, filter: newFilter} : tl)\r\n        setTodoLists([...updatedTodoLists])\r\n    }\r\n    \r\n    const addNewTask = (newTaskTitle: string, todoListId: string) => {\r\n        allTasks[todoListId] = [\r\n            {id: v1(), title: newTaskTitle, isDone: false},\r\n            ...allTasks[todoListId]\r\n        ]\r\n        setAllTasks({...allTasks})\r\n    }\r\n    \r\n    const removeTask = (id: string, todoListId: string) => {\r\n        allTasks[todoListId] = allTasks[todoListId].filter(task => task.id !== id)\r\n        setAllTasks({...allTasks})\r\n    }\r\n    \r\n    const removeTodoList = (todoListId: string) => {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListId))\r\n        delete allTasks[todoListId]\r\n    }\r\n    \r\n    const addNewTodoList = (title: string) => {\r\n        const newTodoListId = v1()\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListId,\r\n            title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setAllTasks({...allTasks, [newTodoListId]: []})\r\n    }\r\n    \r\n    const changeTaskTitle = (taskId: string, newTitle: string, todoListId: string) => {\r\n        \r\n        const changedTasks = allTasks[todoListId].map((task): TaskType =>\r\n            (task.id !== taskId) ? task : {...task, title: newTitle}\r\n        )\r\n        setAllTasks({...allTasks, [todoListId]: changedTasks})\r\n    }\r\n    \r\n    const changeTodoListTitle = (newTitle: string, todoListId: string) => {\r\n        const changedTodoLists = todoLists.map((todoList): TodoListType =>\r\n            (todoList.id !== todoListId) ? todoList : {...todoList, title: newTitle}\r\n        )\r\n        setTodoLists(changedTodoLists)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"App\">\r\n            <StringInputForm\r\n                confirm={addNewTodoList}\r\n            />\r\n            \r\n            {todoLists.length\r\n                ? todoLists.map(todoList =>\r\n                    <TodoListContainer\r\n                        key={todoList.id}\r\n                        todoList={todoList}\r\n                        tasks={allTasks[todoList.id]}\r\n                        removeTask={removeTask}\r\n                        changeTaskIsDone={changeTaskIsDone}\r\n                        addNewTask={addNewTask}\r\n                        changeFilter={changeFilter}\r\n                        onRemoveTodoList={removeTodoList}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTodoListTitle={changeTodoListTitle}\r\n                    />)\r\n                :\r\n                <span>Create your 1st todo list</span>\r\n            }\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}